%% Select imge sequence by choosing sequence number 1,2,3 etc

[exposures, images] = getImageSequence(3);


%% 1. Compute the camera response curve g

[dt, gRed, gGreen, gBlue] = cameraResponse(images, exposures);

% plot(gBlue,'b')
% hold on
% plot(gRed,'r')
% hold on
% plot(gGreen,'g')

%hold off
%plot(zBlue','x')

% title('Camera response function')
% ylabel('Log exposure')
% xlabel('Pixel value')



%% 2. Recover radiance map
% HDR solver
[HDR] = HDRSolver(images, dt, gRed, gGreen, gBlue);
%size(HDR)
%imshow(HDR);


%% 3.1 ldr tonemapping
% local reinhard method
saturation = 0.6;
eps = 0.05;
phi = 14;
[ldrLocal, luminanceLocal, v, v1Final, sm ]  = reinhardLocal(HDR, saturation, eps, phi);

imshow(ldrLocal);

%% 3.2 global reinhard method

a = 1.5;
saturation = 0.6;
[ldrGlobal, ldrLuminanceMap ] = reinhardGlobal( HDR, a, saturation);
imshow(ldrGlobal)

%% 3.3 gamma correction

gamma = 0.7;
A = 1;

EgammaR = A*ldrGlobal(:,:,1).^gamma;
EgammaG = A*ldrGlobal(:,:,2).^gamma;
EgammaB = A*ldrGlobal(:,:,3).^gamma;

imageGamma = cat(3,EgammaR,EgammaG,EgammaB);
imshow(imageGamma);

%% Our own tonemap
HDRNorm=(HDR-min(HDR(:)))/(max(HDR(:))-min(HDR(:)));

gamma = 0.5;
A = 0.75;
gammaIm(:,:,1) = A*HDRNorm(:,:,1).^gamma;
gammaIm(:,:,2) = A*HDRNorm(:,:,2).^gamma;
gammaIm(:,:,3) = A*HDRNorm(:,:,3).^gamma;

L = rgb2gray(gammaIm);


Ltemp = log(L);
N = size(HDRNorm,1) * size(HDRNorm,2);
Lavg = exp(sum(Ltemp(:))/N);


a = 0.11;
T = (a/Lavg)*L;

T2max = max(T(:))*max(T(:));

%Reinhard mapping operator
Ltone = (T(:).*(1+(T(:))./T2max))./(1+T(:));
Ltone = reshape(Ltone, [size(HDRNorm,1), size(HDRNorm,2)]);


M = Ltone(:)./L(:);
M = reshape(M, [size(HDRNorm,1), size(HDRNorm,2)]);


RHDR = HDR(:,:,1);
GHDR = HDR(:,:,2);
BHDR = HDR(:,:,3);

for k =1:size(HDRNorm,1)
    for l=1:size(HDRNorm,2)
        Rnew(k,l) = M(k,l)* RHDR(k,l);
        Gnew(k,l) = M(k,l)* GHDR(k,l);
        Bnew(k,l) = M(k,l)* BHDR(k,l);
    end
end

% toneMap(:,:,1) = immultiply(M,RHDR);
% toneMap(:,:,2) = immultiply(M,GHDR);
% toneMap(:,:,3) = immultiply(M,BHDR);
toneMap = cat(3, Rnew, Gnew, Bnew);
imshow(toneMap)

%% 4. Quality measures

%SSIM
H = fspecial('Gaussian',[11 11],1.5);
A = imfilter(ldrGlobal,H,'replicate');
[ssimval,ssimmap] = ssim(A,ldrGlobal);

imshow(ssimmap,[])
