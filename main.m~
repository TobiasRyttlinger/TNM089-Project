%% Select imge sequence by choosing sequence number 1,2,3 etc

[exposures, images] = getImageSequence(2);

%% 1. Compute the camera response curve g
%sample


[zRed, zGreen, zBlue] = sampleRGB(images);


%% B, shutter speed used in gsolve, logarithm of exposure time

logExp = {};
for e = 1:size(exposures,2)
    logExp{e} = log(exposures{e});
end

dt = zeros(size(zRed,1)*size(zRed,2), size(exposures,2));
for b=1:size(exposures,2)
    dt(:,b) = logExp{b};
end


%% weighting
weight = zeros(255,1);

for k = 1:256
    weight(k) = weights(k);
end
%plot(weight)

%% gsolver, camera response function g

l=100;

[gRed,lERed]=gSolver(zRed, dt, l, weight);

[gGreen,lEGreen]=gSolver(zGreen, dt, l, weight);

[gBlue,lEBlue]=gSolver(zBlue, dt, l, weight);

plot(gBlue,'b')
hold on
plot(gRed,'r')
hold on
plot(gGreen,'g')

%hold off
%plot(zBlue','x')

title('Camera response function')
ylabel('Log exposure')
xlabel('Pixel value')

save('gMat.mat', 'gBlue', 'gRed', 'gGreen');



%% 2. Recover radiance map
% HDR solver
[HDR] = HDRSolver(images, dt, gRed, gGreen, gBlue);
%size(HDR)
%imshow(HDR);


%% 3.1 ldr tonemapping
% local reinhard method
saturation = 0.6;
eps = 0.05;
phi = 14;
[ldrLocal, luminanceLocal, v, v1Final, sm ]  = reinhardLocal(HDR, saturation, eps, phi);

imshow(ldrLocal);

%% 3.2 global reinhard method

a = 0.5;
saturation = 0.8;
[ldrGlobal, ldrLuminanceMap ] = reinhardGlobal( HDR, a, saturation);
imshow(ldrGlobal)

%% 3.3 gamma correction

gamma = 0.7;
A = 1;

EgammaR = A*ldrGlobal(:,:,1).^gamma;
EgammaG = A*ldrGlobal(:,:,2).^gamma;
EgammaB = A*ldrGlobal(:,:,3).^gamma;

imageGamma = cat(3,EgammaR,EgammaG,EgammaB);
imshow(imageGamma);

%%
%rgb = tonemap(HDR);